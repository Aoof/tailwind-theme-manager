<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OKLCH Color Editor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {}
            }
        }
    </script>
    <script src="/js/color.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css">
    <script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>
    <script>
        function convertOklchToRgb(oklchString) {
            try {
                const color = new Color(oklchString);
                return color.to("srgb").toString({format: "hex"});
            } catch (error) {
                console.error('Error converting OKLCH to RGB:', error);
                return '#ffffff';
            }
        }
        
        function convertRgbToOklch(hexColor) {
            try {
                const color = new Color(hexColor);
                return color.to("oklch").toString();
            } catch (error) {
                console.error('Error converting RGB to OKLCH:', error);
                return 'oklch(1 0 0)';
            }
        }
    </script>
    <style>
        .color-picker-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .color-picker-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .dark .color-picker-content {
            background-color: #1f2937;
            color: white;
        }
        
        #color-picker-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .color-preview {
            width: 3rem;
            height: 3rem;
            border-radius: 0.25rem;
            margin-bottom: 1rem;
            border: 2px solid #e5e7eb;
        }
        
        .dark .color-preview {
            border-color: #4b5563;
        }

        .pickr {
            width: 100%;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100 transition-colors duration-200">
    <div class="container mx-auto px-4 py-8 max-w-4xl">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold text-indigo-600 dark:text-indigo-400">OKLCH Color Generator</h1>
            <button id="theme-toggle" class="p-2 rounded-full bg-gray-200 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <svg id="dark-icon" class="w-6 h-6 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
                </svg>
                <svg id="light-icon" class="w-6 h-6 block dark:hidden" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
                </svg>
            </button>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200">File Operations</h2>
                <form action="/save" method="post" class="mb-4">
                    <input type="hidden" name="cssContent" value="<%= formattedColors %>">
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="text" name="filepath" placeholder="File path to save" value="<%= filepath ? filepath : 'oklch_colors.css' %>" 
                            class="flex-grow px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
                        <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors">
                            Save Colors
                        </button>
                    </div>
                </form>

                <form action="/load" method="post">
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="text" name="filepath" placeholder="File path to load" 
                            class="flex-grow px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
                        <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors">
                            Load Colors
                        </button>
                    </div>
                </form>
            </div>

            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200">CSS Output</h2>
                <textarea readonly class="w-full h-32 px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100"><%= formattedColors %></textarea>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200">Color Variables</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <% for (const variable in colors) { %>
                    <div class="color-item flex flex-col gap-2 p-3 border rounded-md dark:border-gray-700">
                        <label class="font-medium"><%= variable %></label>
                        <div class="flex items-center gap-2">
                            <input type="color" id="<%= variable %>-color" value="" data-oklch="<%= colors[variable] %>" 
                                class="w-12 h-12 rounded cursor-pointer border dark:border-gray-600">
                            <input type="text" id="<%= variable %>-value" value="<%= colors[variable] %>" readonly
                                class="flex-grow px-3 py-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
                            <button onclick="updateColor('<%= variable %>')" 
                                class="px-3 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors">
                                Update
                            </button>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <div id="color-picker-modal" class="color-picker-modal">
        <div class="color-picker-content">
            <h3 class="text-xl font-semibold mb-4">Pick a Color</h3>
            <div id="color-picker-container">
                <div id="color-preview" class="color-preview"></div>
                <div id="color-picker"></div>
            </div>
            <div class="flex flex-col gap-2 mb-4">
                <label class="font-medium">Hex:</label>
                <input type="text" id="hex-input" class="px-3 py-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                <label class="font-medium">OKLCH:</label>
                <input type="text" id="oklch-input" class="px-3 py-2 border rounded-md bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
            </div>
            <div class="flex justify-end gap-2">
                <button id="cancel-color" class="px-4 py-2 bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-white rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
                    Cancel
                </button>
                <button id="apply-color" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors">
                    Apply
                </button>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('theme-toggle').addEventListener('click', () => {
            document.documentElement.classList.toggle('dark');
            localStorage.setItem('theme', document.documentElement.classList.contains('dark') ? 'dark' : 'light');
        });

        let colorPicker;
        let currentVariable;

        document.addEventListener('DOMContentLoaded', () => {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'light') {
                document.documentElement.classList.remove('dark');
            }
            
            if (typeof Color === 'undefined') {
                console.error('Color library not loaded correctly');
            } else {
                console.log('Color library loaded successfully');
            }

            const colorItems = document.querySelectorAll('.color-item');
            colorItems.forEach(item => {
                const colorInput = item.querySelector('input[type="color"]');
                const oklchValue = colorInput.dataset.oklch;

                const rgb = convertOklchToRgb(oklchValue);
                if (rgb) {
                    colorInput.value = rgb;
                }
                
                colorInput.addEventListener('click', function(e) {
                    e.preventDefault();
                    const variableName = this.id.replace('-color', '');
                    updateColor(variableName);
                });
            });
            
            colorPicker = Pickr.create({
                el: '#color-picker',
                theme: 'classic',
                default: '#ffffff',
                swatches: [
                    '#f44336', '#E91E63', '#9C27B0', '#673AB7',
                    '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4',
                    '#009688', '#4CAF50', '#8BC34A', '#CDDC39',
                    '#FFEB3B', '#FFC107', '#FF9800', '#FF5722'
                ],
                components: {
                    preview: true,
                    opacity: true,
                    hue: true,
                    interaction: {
                        hex: true,
                        rgba: true,
                        hsla: true,
                        input: true,
                        clear: false,
                        save: false
                    }
                }
            });
            
            colorPicker.on('change', function(color) {
                const hexColor = color.toHEXA().toString();
                document.getElementById('hex-input').value = hexColor;
                document.getElementById('oklch-input').value = convertRgbToOklch(hexColor);
                document.getElementById('color-preview').style.backgroundColor = hexColor;
            });
            
            document.getElementById('hex-input').addEventListener('input', function() {
                try {
                    colorPicker.setColor(this.value);
                    document.getElementById('oklch-input').value = convertRgbToOklch(this.value);
                    document.getElementById('color-preview').style.backgroundColor = this.value;
                } catch (e) {
                    console.error('Invalid hex color format:', e);
                }
            });
            
            document.getElementById('oklch-input').addEventListener('input', function() {
                try {
                    const hexColor = convertOklchToRgb(this.value);
                    if (hexColor) {
                        colorPicker.setColor(hexColor);
                        document.getElementById('hex-input').value = hexColor;
                        document.getElementById('color-preview').style.backgroundColor = hexColor;
                    }
                } catch (e) {
                    console.error('Invalid OKLCH color format:', e);
                }
            });
            
            document.getElementById('cancel-color').addEventListener('click', function() {
                document.getElementById('color-picker-modal').style.display = 'none';
            });
            
            document.getElementById('apply-color').addEventListener('click', function() {
                if (!currentVariable) return;
                
                const hexColor = document.getElementById('hex-input').value;
                const oklchColor = document.getElementById('oklch-input').value;
                
                const form = document.createElement('form');
                form.action = '/update-color';
                form.method = 'post';
                
                const variableInput = document.createElement('input');
                variableInput.type = 'hidden';
                variableInput.name = 'variable';
                variableInput.value = currentVariable;
                form.appendChild(variableInput);
                
                const colorInput = document.createElement('input');
                colorInput.type = 'hidden';
                colorInput.name = 'color';
                colorInput.value = oklchColor;
                form.appendChild(colorInput);
                
                document.body.appendChild(form);
                form.submit();
            });
        });

        function updateColor(variable) {
            currentVariable = variable;
            const colorInput = document.getElementById(variable + '-color');
            const colorValue = document.getElementById(variable + '-value');
            
            const hexValue = colorInput.value;
            const oklchValue = colorValue.value;
            
            colorPicker.setColor(hexValue);
            document.getElementById('hex-input').value = hexValue;
            document.getElementById('oklch-input').value = oklchValue;
            document.getElementById('color-preview').style.backgroundColor = hexValue;
            
            document.getElementById('color-picker-modal').style.display = 'flex';
        }
    </script>
</body>
</html>
